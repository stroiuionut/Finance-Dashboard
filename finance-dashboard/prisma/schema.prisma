// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
//     provider = "sqlite"
//     // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    bankAccounts  BankAccount[]
    category      Category[]
    transaction   Transaction[]
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model BankAccount {
    id            Int @id @default(autoincrement())
    accountNumber String
    balance       BigInt
    user          User @relation(fields: [userId], references: [id])
    userId        String
    transaction   Transaction[]

    @@index([userId])
    @@unique([accountNumber, userId])
}

model Category {
    id          Int @id @default(autoincrement())
    name        String
    type        String
    icon        String
    iconColor   String
    user        User @relation(fields: [userId], references: [id])
    userId      String
    transaction Transaction[]

    @@index([userId])
    @@unique([name, type, userId])
}

model Transaction {
    id            Int @id @default(autoincrement())
    date          DateTime
    amount        BigInt
    note          String?
    recipient     String?
    user          User @relation(fields: [userId], references: [id])
    userId        String
    bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
    bankAccountId Int
    category      Category? @relation(fields: [categoryId], references: [id])
    categoryId    Int?

    @@index([userId])
    @@index([bankAccountId])
    @@index([categoryId])

    @@unique([userId, bankAccountId, categoryId])
}

